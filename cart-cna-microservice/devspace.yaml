version: v2beta1
name: kubecon-india-2025git

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      build_images --all -t $(git describe --always)
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      az acr login --name kubecon
      build_images azure -t $(git describe --always)
      create_deployments azure 

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: cart-dev
    dockerfile: ./Dockerfile.dev
    context: ./
  azure:
    image: kubecon.azurecr.io/cart
    dockerfile: ./Dockerfile
    context: ./  
    rebuildStrategy: always     

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - ../infra/k8s/apps/overlays/local/cart
      kustomize: true
  azure:
    kubectl:
      manifests:
        - ../infra/k8s/apps/overlays/azure/cart
      kustomize: true      

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    labelSelector:
      app: cart-deployment
    container: cart
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: cart-dev
    command:
      - java
      - -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:6000
      - -Dlogging.level.root=INFO
      - -jar
      - /app/app.jar     
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "7000"
      - port: "6000"
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://localhost:7000

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  start:
    command: |
      devspace enter -- bash -c '
        # Remove old .jar files
        rm -f target/*.jar

        # Build jar file
        gradle build

        java -jar target/*.jar'

dependencies:
  infra:
    path: ../devspace-common    # Deploy shared services first
  product-service:
    path: ../products-cna-microservice
  search-service:
    path: ../search-cna-microservice
  ui:
    path: ../store-ui
  users-service:
    path: ../users-cna-microservice 
